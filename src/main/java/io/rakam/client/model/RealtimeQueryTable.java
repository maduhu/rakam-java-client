/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.rakam.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.rakam.client.model.Measure;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;


/**
 * RealtimeQueryTable
 */

public class RealtimeQueryTable   {
  @SerializedName("table_name")
  private String tableName = null;

  @SerializedName("filter")
  private String filter = null;

  @SerializedName("measure")
  private Measure measure = null;

  @SerializedName("dimensions")
  private List<String> dimensions = new ArrayList<String>();

  @SerializedName("aggregate")
  private Boolean aggregate = null;

  @SerializedName("date_start")
  private DateTime dateStart = null;

  @SerializedName("date_end")
  private DateTime dateEnd = null;

  public RealtimeQueryTable tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

   /**
   * Get tableName
   * @return tableName
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }

  public RealtimeQueryTable filter(String filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }

  public RealtimeQueryTable measure(Measure measure) {
    this.measure = measure;
    return this;
  }

   /**
   * Get measure
   * @return measure
  **/
  @ApiModelProperty(example = "null", value = "")
  public Measure getMeasure() {
    return measure;
  }

  public void setMeasure(Measure measure) {
    this.measure = measure;
  }

  public RealtimeQueryTable dimensions(List<String> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

   /**
   * Get dimensions
   * @return dimensions
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<String> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<String> dimensions) {
    this.dimensions = dimensions;
  }

  public RealtimeQueryTable aggregate(Boolean aggregate) {
    this.aggregate = aggregate;
    return this;
  }

   /**
   * Get aggregate
   * @return aggregate
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getAggregate() {
    return aggregate;
  }

  public void setAggregate(Boolean aggregate) {
    this.aggregate = aggregate;
  }

  public RealtimeQueryTable dateStart(DateTime dateStart) {
    this.dateStart = dateStart;
    return this;
  }

   /**
   * Get dateStart
   * @return dateStart
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getDateStart() {
    return dateStart;
  }

  public void setDateStart(DateTime dateStart) {
    this.dateStart = dateStart;
  }

  public RealtimeQueryTable dateEnd(DateTime dateEnd) {
    this.dateEnd = dateEnd;
    return this;
  }

   /**
   * Get dateEnd
   * @return dateEnd
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getDateEnd() {
    return dateEnd;
  }

  public void setDateEnd(DateTime dateEnd) {
    this.dateEnd = dateEnd;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealtimeQueryTable realtimeQueryTable = (RealtimeQueryTable) o;
    return Objects.equals(this.tableName, realtimeQueryTable.tableName) &&
        Objects.equals(this.filter, realtimeQueryTable.filter) &&
        Objects.equals(this.measure, realtimeQueryTable.measure) &&
        Objects.equals(this.dimensions, realtimeQueryTable.dimensions) &&
        Objects.equals(this.aggregate, realtimeQueryTable.aggregate) &&
        Objects.equals(this.dateStart, realtimeQueryTable.dateStart) &&
        Objects.equals(this.dateEnd, realtimeQueryTable.dateEnd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, filter, measure, dimensions, aggregate, dateStart, dateEnd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealtimeQueryTable {\n");
    
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    measure: ").append(toIndentedString(measure)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    aggregate: ").append(toIndentedString(aggregate)).append("\n");
    sb.append("    dateStart: ").append(toIndentedString(dateStart)).append("\n");
    sb.append("    dateEnd: ").append(toIndentedString(dateEnd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

