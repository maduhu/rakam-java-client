/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.rakam.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.joda.time.DateTime;


/**
 * MaterializedView
 */

public class MaterializedView   {
  @SerializedName("table_name")
  private String tableName = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("query")
  private String query = null;

  @SerializedName("update_interval")
  private String updateInterval = null;

  @SerializedName("incremental")
  private Boolean incremental = false;

  @SerializedName("options")
  private Map<String, Object> options = new HashMap<String, Object>();

  @SerializedName("last_update")
  private DateTime lastUpdate = null;

  public MaterializedView tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

   /**
   * Get tableName
   * @return tableName
  **/
  @ApiModelProperty(example = "null", required = true, value = "")
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }

  public MaterializedView name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(example = "null", required = true, value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public MaterializedView query(String query) {
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @ApiModelProperty(example = "null", required = true, value = "")
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }

  public MaterializedView updateInterval(String updateInterval) {
    this.updateInterval = updateInterval;
    return this;
  }

   /**
   * Get updateInterval
   * @return updateInterval
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getUpdateInterval() {
    return updateInterval;
  }

  public void setUpdateInterval(String updateInterval) {
    this.updateInterval = updateInterval;
  }

  public MaterializedView incremental(Boolean incremental) {
    this.incremental = incremental;
    return this;
  }

   /**
   * Get incremental
   * @return incremental
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getIncremental() {
    return incremental;
  }

  public void setIncremental(Boolean incremental) {
    this.incremental = incremental;
  }

  public MaterializedView options(Map<String, Object> options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @ApiModelProperty(example = "null", value = "")
  public Map<String, Object> getOptions() {
    return options;
  }

  public void setOptions(Map<String, Object> options) {
    this.options = options;
  }

  public MaterializedView lastUpdate(DateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

   /**
   * Get lastUpdate
   * @return lastUpdate
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(DateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaterializedView materializedView = (MaterializedView) o;
    return Objects.equals(this.tableName, materializedView.tableName) &&
        Objects.equals(this.name, materializedView.name) &&
        Objects.equals(this.query, materializedView.query) &&
        Objects.equals(this.updateInterval, materializedView.updateInterval) &&
        Objects.equals(this.incremental, materializedView.incremental) &&
        Objects.equals(this.options, materializedView.options) &&
        Objects.equals(this.lastUpdate, materializedView.lastUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, name, query, updateInterval, incremental, options, lastUpdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaterializedView {\n");
    
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    updateInterval: ").append(toIndentedString(updateInterval)).append("\n");
    sb.append("    incremental: ").append(toIndentedString(incremental)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

