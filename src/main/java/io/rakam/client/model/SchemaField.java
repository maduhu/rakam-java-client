/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.rakam.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * SchemaField
 */

public class SchemaField   {
  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    @SerializedName("STRING")
    STRING("STRING"),
    
    @SerializedName("INTEGER")
    INTEGER("INTEGER"),
    
    @SerializedName("DECIMAL")
    DECIMAL("DECIMAL"),
    
    @SerializedName("DOUBLE")
    DOUBLE("DOUBLE"),
    
    @SerializedName("LONG")
    LONG("LONG"),
    
    @SerializedName("BOOLEAN")
    BOOLEAN("BOOLEAN"),
    
    @SerializedName("DATE")
    DATE("DATE"),
    
    @SerializedName("TIME")
    TIME("TIME"),
    
    @SerializedName("TIMESTAMP")
    TIMESTAMP("TIMESTAMP"),
    
    @SerializedName("BINARY")
    BINARY("BINARY"),
    
    @SerializedName("ARRAY_STRING")
    ARRAY_STRING("ARRAY_STRING"),
    
    @SerializedName("ARRAY_INTEGER")
    ARRAY_INTEGER("ARRAY_INTEGER"),
    
    @SerializedName("ARRAY_DECIMAL")
    ARRAY_DECIMAL("ARRAY_DECIMAL"),
    
    @SerializedName("ARRAY_DOUBLE")
    ARRAY_DOUBLE("ARRAY_DOUBLE"),
    
    @SerializedName("ARRAY_LONG")
    ARRAY_LONG("ARRAY_LONG"),
    
    @SerializedName("ARRAY_BOOLEAN")
    ARRAY_BOOLEAN("ARRAY_BOOLEAN"),
    
    @SerializedName("ARRAY_DATE")
    ARRAY_DATE("ARRAY_DATE"),
    
    @SerializedName("ARRAY_TIME")
    ARRAY_TIME("ARRAY_TIME"),
    
    @SerializedName("ARRAY_TIMESTAMP")
    ARRAY_TIMESTAMP("ARRAY_TIMESTAMP"),
    
    @SerializedName("ARRAY_BINARY")
    ARRAY_BINARY("ARRAY_BINARY"),
    
    @SerializedName("MAP_STRING")
    MAP_STRING("MAP_STRING"),
    
    @SerializedName("MAP_INTEGER")
    MAP_INTEGER("MAP_INTEGER"),
    
    @SerializedName("MAP_DECIMAL")
    MAP_DECIMAL("MAP_DECIMAL"),
    
    @SerializedName("MAP_DOUBLE")
    MAP_DOUBLE("MAP_DOUBLE"),
    
    @SerializedName("MAP_LONG")
    MAP_LONG("MAP_LONG"),
    
    @SerializedName("MAP_BOOLEAN")
    MAP_BOOLEAN("MAP_BOOLEAN"),
    
    @SerializedName("MAP_DATE")
    MAP_DATE("MAP_DATE"),
    
    @SerializedName("MAP_TIME")
    MAP_TIME("MAP_TIME"),
    
    @SerializedName("MAP_TIMESTAMP")
    MAP_TIMESTAMP("MAP_TIMESTAMP"),
    
    @SerializedName("MAP_BINARY")
    MAP_BINARY("MAP_BINARY");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("unique")
  private Boolean unique = false;

  @SerializedName("descriptiveName")
  private String descriptiveName = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("category")
  private String category = null;

  public SchemaField name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SchemaField type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(example = "null", value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public SchemaField unique(Boolean unique) {
    this.unique = unique;
    return this;
  }

   /**
   * Get unique
   * @return unique
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getUnique() {
    return unique;
  }

  public void setUnique(Boolean unique) {
    this.unique = unique;
  }

  public SchemaField descriptiveName(String descriptiveName) {
    this.descriptiveName = descriptiveName;
    return this;
  }

   /**
   * Get descriptiveName
   * @return descriptiveName
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getDescriptiveName() {
    return descriptiveName;
  }

  public void setDescriptiveName(String descriptiveName) {
    this.descriptiveName = descriptiveName;
  }

  public SchemaField description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public SchemaField category(String category) {
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaField schemaField = (SchemaField) o;
    return Objects.equals(this.name, schemaField.name) &&
        Objects.equals(this.type, schemaField.type) &&
        Objects.equals(this.unique, schemaField.unique) &&
        Objects.equals(this.descriptiveName, schemaField.descriptiveName) &&
        Objects.equals(this.description, schemaField.description) &&
        Objects.equals(this.category, schemaField.category);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, unique, descriptiveName, description, category);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaField {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unique: ").append(toIndentedString(unique)).append("\n");
    sb.append("    descriptiveName: ").append(toIndentedString(descriptiveName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

