/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.rakam.client.api;

import io.rakam.ApiCallback;
import io.rakam.ApiClient;
import io.rakam.ApiException;
import io.rakam.ApiResponse;
import io.rakam.Configuration;
import io.rakam.Pair;
import io.rakam.ProgressRequestBody;
import io.rakam.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.rakam.client.model.ContinuousQuery;
import io.rakam.client.model.SuccessMessage;
import io.rakam.client.model.ErrorMessage;
import io.rakam.client.model.ContinuousQueryDeleteQuery;
import io.rakam.client.model.ContinuousQueryGetQuery;
import io.rakam.client.model.Collection;
import io.rakam.client.model.ContinuousQueryGetSchemaOfQuery;
import io.rakam.client.model.ContinuousQueryTestQuery;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContinuousqueryApi {
    private ApiClient apiClient;

    public ContinuousqueryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContinuousqueryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createQuery */
    private com.squareup.okhttp.Call createQueryCall(ContinuousQuery continuousQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = continuousQuery;
        
        // verify the required parameter 'continuousQuery' is set
        if (continuousQuery == null) {
            throw new ApiException("Missing the required parameter 'continuousQuery' when calling createQuery(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/continuous-query/create".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "master_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create stream
     * Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
     * @param continuousQuery  (required)
     * @return SuccessMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessMessage createQuery(ContinuousQuery continuousQuery) throws ApiException {
        ApiResponse<SuccessMessage> resp = createQueryWithHttpInfo(continuousQuery);
        return resp.getData();
    }

    /**
     * Create stream
     * Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
     * @param continuousQuery  (required)
     * @return ApiResponse&lt;SuccessMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessMessage> createQueryWithHttpInfo(ContinuousQuery continuousQuery) throws ApiException {
        com.squareup.okhttp.Call call = createQueryCall(continuousQuery, null, null);
        Type localVarReturnType = new TypeToken<SuccessMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create stream (asynchronously)
     * Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
     * @param continuousQuery  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createQueryAsync(ContinuousQuery continuousQuery, final ApiCallback<SuccessMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createQueryCall(continuousQuery, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteQuery */
    private com.squareup.okhttp.Call deleteQueryCall(ContinuousQueryDeleteQuery continuousQueryDeleteQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = continuousQueryDeleteQuery;
        
        // verify the required parameter 'continuousQueryDeleteQuery' is set
        if (continuousQueryDeleteQuery == null) {
            throw new ApiException("Missing the required parameter 'continuousQueryDeleteQuery' when calling deleteQuery(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/continuous-query/delete".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "master_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete stream
     * 
     * @param continuousQueryDeleteQuery  (required)
     * @return SuccessMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessMessage deleteQuery(ContinuousQueryDeleteQuery continuousQueryDeleteQuery) throws ApiException {
        ApiResponse<SuccessMessage> resp = deleteQueryWithHttpInfo(continuousQueryDeleteQuery);
        return resp.getData();
    }

    /**
     * Delete stream
     * 
     * @param continuousQueryDeleteQuery  (required)
     * @return ApiResponse&lt;SuccessMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessMessage> deleteQueryWithHttpInfo(ContinuousQueryDeleteQuery continuousQueryDeleteQuery) throws ApiException {
        com.squareup.okhttp.Call call = deleteQueryCall(continuousQueryDeleteQuery, null, null);
        Type localVarReturnType = new TypeToken<SuccessMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete stream (asynchronously)
     * 
     * @param continuousQueryDeleteQuery  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQueryAsync(ContinuousQueryDeleteQuery continuousQueryDeleteQuery, final ApiCallback<SuccessMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQueryCall(continuousQueryDeleteQuery, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getQuery */
    private com.squareup.okhttp.Call getQueryCall(ContinuousQueryGetQuery continuousQueryGetQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = continuousQueryGetQuery;
        
        // verify the required parameter 'continuousQueryGetQuery' is set
        if (continuousQueryGetQuery == null) {
            throw new ApiException("Missing the required parameter 'continuousQueryGetQuery' when calling getQuery(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/continuous-query/get".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "read_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get continuous query
     * 
     * @param continuousQueryGetQuery  (required)
     * @return ContinuousQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContinuousQuery getQuery(ContinuousQueryGetQuery continuousQueryGetQuery) throws ApiException {
        ApiResponse<ContinuousQuery> resp = getQueryWithHttpInfo(continuousQueryGetQuery);
        return resp.getData();
    }

    /**
     * Get continuous query
     * 
     * @param continuousQueryGetQuery  (required)
     * @return ApiResponse&lt;ContinuousQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContinuousQuery> getQueryWithHttpInfo(ContinuousQueryGetQuery continuousQueryGetQuery) throws ApiException {
        com.squareup.okhttp.Call call = getQueryCall(continuousQueryGetQuery, null, null);
        Type localVarReturnType = new TypeToken<ContinuousQuery>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get continuous query (asynchronously)
     * 
     * @param continuousQueryGetQuery  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQueryAsync(ContinuousQueryGetQuery continuousQueryGetQuery, final ApiCallback<ContinuousQuery> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQueryCall(continuousQueryGetQuery, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContinuousQuery>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSchemaOfQuery */
    private com.squareup.okhttp.Call getSchemaOfQueryCall(ContinuousQueryGetSchemaOfQuery continuousQueryGetSchemaOfQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = continuousQueryGetSchemaOfQuery;
        
        // verify the required parameter 'continuousQueryGetSchemaOfQuery' is set
        if (continuousQueryGetSchemaOfQuery == null) {
            throw new ApiException("Missing the required parameter 'continuousQueryGetSchemaOfQuery' when calling getSchemaOfQuery(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/continuous-query/schema".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "read_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get query schema
     * 
     * @param continuousQueryGetSchemaOfQuery  (required)
     * @return List&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Collection> getSchemaOfQuery(ContinuousQueryGetSchemaOfQuery continuousQueryGetSchemaOfQuery) throws ApiException {
        ApiResponse<List<Collection>> resp = getSchemaOfQueryWithHttpInfo(continuousQueryGetSchemaOfQuery);
        return resp.getData();
    }

    /**
     * Get query schema
     * 
     * @param continuousQueryGetSchemaOfQuery  (required)
     * @return ApiResponse&lt;List&lt;Collection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Collection>> getSchemaOfQueryWithHttpInfo(ContinuousQueryGetSchemaOfQuery continuousQueryGetSchemaOfQuery) throws ApiException {
        com.squareup.okhttp.Call call = getSchemaOfQueryCall(continuousQueryGetSchemaOfQuery, null, null);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get query schema (asynchronously)
     * 
     * @param continuousQueryGetSchemaOfQuery  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSchemaOfQueryAsync(ContinuousQueryGetSchemaOfQuery continuousQueryGetSchemaOfQuery, final ApiCallback<List<Collection>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSchemaOfQueryCall(continuousQueryGetSchemaOfQuery, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listQueries */
    private com.squareup.okhttp.Call listQueriesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/continuous-query/list".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "read_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List queries
     * 
     * @return List&lt;ContinuousQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContinuousQuery> listQueries() throws ApiException {
        ApiResponse<List<ContinuousQuery>> resp = listQueriesWithHttpInfo();
        return resp.getData();
    }

    /**
     * List queries
     * 
     * @return ApiResponse&lt;List&lt;ContinuousQuery&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContinuousQuery>> listQueriesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listQueriesCall(null, null);
        Type localVarReturnType = new TypeToken<List<ContinuousQuery>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List queries (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listQueriesAsync(final ApiCallback<List<ContinuousQuery>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listQueriesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContinuousQuery>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for testQuery */
    private com.squareup.okhttp.Call testQueryCall(ContinuousQueryTestQuery continuousQueryTestQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = continuousQueryTestQuery;
        
        // verify the required parameter 'continuousQueryTestQuery' is set
        if (continuousQueryTestQuery == null) {
            throw new ApiException("Missing the required parameter 'continuousQueryTestQuery' when calling testQuery(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/continuous-query/test".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "read_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Test continuous query
     * 
     * @param continuousQueryTestQuery  (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean testQuery(ContinuousQueryTestQuery continuousQueryTestQuery) throws ApiException {
        ApiResponse<Boolean> resp = testQueryWithHttpInfo(continuousQueryTestQuery);
        return resp.getData();
    }

    /**
     * Test continuous query
     * 
     * @param continuousQueryTestQuery  (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> testQueryWithHttpInfo(ContinuousQueryTestQuery continuousQueryTestQuery) throws ApiException {
        com.squareup.okhttp.Call call = testQueryCall(continuousQueryTestQuery, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test continuous query (asynchronously)
     * 
     * @param continuousQueryTestQuery  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call testQueryAsync(ContinuousQueryTestQuery continuousQueryTestQuery, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = testQueryCall(continuousQueryTestQuery, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
