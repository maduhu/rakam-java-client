/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.rakam.client.api;

import io.rakam.ApiException;
import io.rakam.client.model.UserCreateSegment;
import io.rakam.client.model.SuccessMessage;
import io.rakam.client.model.ErrorMessage;
import io.rakam.client.model.User;
import io.rakam.client.model.UserCreateUsers;
import io.rakam.client.model.CollectionEvent;
import io.rakam.client.model.UserGetEvents;
import io.rakam.client.model.MetadataResponse;
import io.rakam.client.model.UserGetUser;
import io.rakam.client.model.UserIncrementProperty;
import io.rakam.client.model.QueryResult;
import io.rakam.client.model.UserSearchUsers;
import io.rakam.client.model.UserUnsetProperty;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * Get events of the user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSegmentTest() throws ApiException {
        UserCreateSegment userCreateSegment = null;
        // SuccessMessage response = api.createSegment(userCreateSegment);

        // TODO: test validations
    }
    
    /**
     * Create new user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        User user = null;
        // Integer response = api.createUser(user);

        // TODO: test validations
    }
    
    /**
     * Create multiple new users
     *
     * Returns user ids. User id may be string or numeric.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUsersTest() throws ApiException {
        UserCreateUsers userCreateUsers = null;
        // List<Object> response = api.createUsers(userCreateUsers);

        // TODO: test validations
    }
    
    /**
     * Get events of the user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        UserGetEvents userGetEvents = null;
        // List<CollectionEvent> response = api.getEvents(userGetEvents);

        // TODO: test validations
    }
    
    /**
     * Get user storage metadata
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMetadataTest() throws ApiException {
        // MetadataResponse response = api.getMetadata();

        // TODO: test validations
    }
    
    /**
     * Get user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        UserGetUser userGetUser = null;
        // User response = api.getUser(userGetUser);

        // TODO: test validations
    }
    
    /**
     * Set user property
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void incrementPropertyTest() throws ApiException {
        UserIncrementProperty userIncrementProperty = null;
        // SuccessMessage response = api.incrementProperty(userIncrementProperty);

        // TODO: test validations
    }
    
    /**
     * Search users
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchUsersTest() throws ApiException {
        UserSearchUsers userSearchUsers = null;
        // QueryResult response = api.searchUsers(userSearchUsers);

        // TODO: test validations
    }
    
    /**
     * Set user properties
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPropertiesTest() throws ApiException {
        User user = null;
        // Integer response = api.setProperties(user);

        // TODO: test validations
    }
    
    /**
     * Set user properties once
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPropertiesOnceTest() throws ApiException {
        User user = null;
        // Integer response = api.setPropertiesOnce(user);

        // TODO: test validations
    }
    
    /**
     * Unset user property
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsetPropertyTest() throws ApiException {
        UserUnsetProperty userUnsetProperty = null;
        // SuccessMessage response = api.unsetProperty(userUnsetProperty);

        // TODO: test validations
    }
    
}
