/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.rakam.client.api;

import io.rakam.ApiException;
import io.rakam.client.model.SchemaField;
import io.rakam.client.model.ProjectAddCustomFieldsToSchema;
import io.rakam.client.model.ErrorMessage;
import io.rakam.client.model.ProjectAddFieldsToSchema;
import io.rakam.client.model.ProjectCheckApiKeys;
import io.rakam.client.model.CheckLockKey;
import io.rakam.client.model.ProjectApiKeys;
import io.rakam.client.model.CreateProject;
import io.rakam.client.model.SuccessMessage;
import io.rakam.client.model.ModuleDescriptor;
import io.rakam.client.model.Stats;
import io.rakam.client.model.ProjectGetStats;
import io.rakam.client.model.ProjectSchema;
import io.rakam.client.model.Collection;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminApi
 */
public class AdminApiTest {

    private final AdminApi api = new AdminApi();

    
    /**
     * Add fields to collections by transforming other schemas
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCustomFieldsToSchemaTest() throws ApiException {
        ProjectAddCustomFieldsToSchema projectAddCustomFieldsToSchema = null;
        // List<SchemaField> response = api.addCustomFieldsToSchema(projectAddCustomFieldsToSchema);

        // TODO: test validations
    }
    
    /**
     * Add fields to collections
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFieldsToSchemaTest() throws ApiException {
        ProjectAddFieldsToSchema projectAddFieldsToSchema = null;
        // List<SchemaField> response = api.addFieldsToSchema(projectAddFieldsToSchema);

        // TODO: test validations
    }
    
    /**
     * Create API Keys
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkApiKeysTest() throws ApiException {
        ProjectCheckApiKeys projectCheckApiKeys = null;
        // List<Boolean> response = api.checkApiKeys(projectCheckApiKeys);

        // TODO: test validations
    }
    
    /**
     * Check lock key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkLockKeyTest() throws ApiException {
        CheckLockKey checkLockKey = null;
        // Boolean response = api.checkLockKey(checkLockKey);

        // TODO: test validations
    }
    
    /**
     * Get collection names
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void collectionsTest() throws ApiException {
        // List<String> response = api.collections();

        // TODO: test validations
    }
    
    /**
     * Create API Keys
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createApiKeysTest() throws ApiException {
        // ProjectApiKeys response = api.createApiKeys();

        // TODO: test validations
    }
    
    /**
     * Create project
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        CreateProject createProject = null;
        // ProjectApiKeys response = api.createProject(createProject);

        // TODO: test validations
    }
    
    /**
     * Delete project
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        // SuccessMessage response = api.deleteProject();

        // TODO: test validations
    }
    
    /**
     * List installed modules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConfigurationsTest() throws ApiException {
        // List<ModuleDescriptor> response = api.getConfigurations();

        // TODO: test validations
    }
    
    /**
     * List created projects
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectsTest() throws ApiException {
        // List<String> response = api.getProjects();

        // TODO: test validations
    }
    
    /**
     * Get project stats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStatsTest() throws ApiException {
        ProjectGetStats projectGetStats = null;
        // Map<String, Stats> response = api.getStats(projectGetStats);

        // TODO: test validations
    }
    
    /**
     * Get types
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTypesTest() throws ApiException {
        // Map<String, String> response = api.getTypes();

        // TODO: test validations
    }
    
    /**
     * Revoke API Keys
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revokeApiKeysTest() throws ApiException {
        String masterKey = null;
        // SuccessMessage response = api.revokeApiKeys(masterKey);

        // TODO: test validations
    }
    
    /**
     * Get collection schema
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void schemaTest() throws ApiException {
        ProjectSchema projectSchema = null;
        // List<Collection> response = api.schema(projectSchema);

        // TODO: test validations
    }
    
}
